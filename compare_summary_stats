{# Helper macro to get downstream models #}
{% macro get_downstream_models(model_name) %}
    {% set downstream_models = [] %}
    {% if execute %}
        {% set model_node = graph.nodes['model.' ~ project_name ~ '.' ~ model_name] %}
        {% for node in graph.nodes.values() %}
            {% if node.resource_type == 'model' and node.depends_on and model_node.unique_id in node.depends_on.nodes %}
                {% do downstream_models.append(node.name) %}
            {% endif %}
        {% endfor %}
    {% endif %}
    {{ return(downstream_models) }}
{% endmacro %}

{# Helper macro to collect statistics for a model #}
{% macro collect_model_stats(model_relation) %}
    {% set stats = {} %}
    
    {% if execute %}
        {% set columns = adapter.get_columns_in_relation(model_relation) %}
        
        {% set stats_query %}
            SELECT 
                COUNT(*) as row_count
                {% for column in columns %}
                    {% if column.is_number() or column.is_string() or column.is_datetime() %}
                        ,COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                        {% if column.is_number() %}
                            ,AVG({{ column.name }})::NUMERIC(38,2) as avg_{{ column.name }}
                            ,MIN({{ column.name }}) as min_{{ column.name }}
                            ,MAX({{ column.name }}) as max_{{ column.name }}
                        {% endif %}
                    {% endif %}
                {% endfor %}
            FROM {{ model_relation }}
        {% endset %}
        
        {% set results = run_query(stats_query) %}
        {% if results %}
            {% do stats.update(results.rows[0]) %}
        {% endif %}
    {% endif %}
    
    {{ return(stats) }}
{% endmacro %}

{# Main comparison macro #}
{% macro compare_model_execution_results(model_name, comparison_schema='dbt_model_comparison', output_table='model_comparison_results') %}
    {% set results = {} %}
    
    {% if execute %}
        {# Get downstream models #}
        {% set downstream_models = get_downstream_models(model_name) %}
        
        {# Initialize results #}
        {% set results = {
            'prod': {'stats': {}},
            'dev': {'stats': {}}
        } %}
        
        {# Create comparison schema if it doesn't exist #}
        {% do run_query('CREATE SCHEMA IF NOT EXISTS ' ~ comparison_schema) %}
        
        {# Collect current (dev) stats #}
        {% do results.dev.stats.update({model_name: collect_model_stats(ref(model_name))}) %}
        {% for downstream in downstream_models %}
            {% do results.dev.stats.update({downstream: collect_model_stats(ref(downstream))}) %}
        {% endfor %}
        
        {# Collect prod stats using prod schema #}
        {% set prod_model = adapter.get_relation(
            database=target.database,
            schema=target.schema,
            identifier=model_name
        ) %}
        
        {% if prod_model %}
            {% do results.prod.stats.update({model_name: collect_model_stats(prod_model)}) %}
            
            {% for downstream in downstream_models %}
                {% set prod_downstream = adapter.get_relation(
                    database=target.database,
                    schema=target.schema,
                    identifier=downstream
                ) %}
                {% if prod_downstream %}
                    {% do results.prod.stats.update({downstream: collect_model_stats(prod_downstream)}) %}
                {% endif %}
            {% endfor %}
        {% endif %}
        
        {# Create or replace comparison results table #}
        {% set comparison_query %}
            CREATE TABLE IF NOT EXISTS {{ comparison_schema }}.{{ output_table }} (
                timestamp TIMESTAMP,
                model VARCHAR(255),
                metric VARCHAR(255),
                prod_value VARCHAR(255),
                dev_value VARCHAR(255),
                difference NUMERIC(38,2),
                percent_change NUMERIC(38,2)
            );
            
            TRUNCATE TABLE {{ comparison_schema }}.{{ output_table }};
            
            {% for model, prod_stats in results.prod.stats.items() %}
                {% set dev_stats = results.dev.stats[model] %}
                {% for metric, prod_value in prod_stats.items() %}
                    {% set dev_value = dev_stats[metric] %}
                    {% set difference = none %}
                    {% set percent_change = none %}
                    
                    {% if prod_value is number and dev_value is number %}
                        {% set difference = dev_value - prod_value %}
                        {% if prod_value != 0 %}
                            {% set percent_change = ((dev_value - prod_value) / prod_value * 100) %}
                        {% endif %}
                    {% endif %}
                    
                    INSERT INTO {{ comparison_schema }}.{{ output_table }}
                    VALUES (
                        GETDATE(),
                        '{{ model }}',
                        '{{ metric }}',
                        '{{ prod_value }}',
                        '{{ dev_value }}',
                        {{ difference if difference is not none else 'NULL' }},
                        {{ percent_change if percent_change is not none else 'NULL' }}
                    );
                {% endfor %}
            {% endfor %}
        {% endset %}
        
        {% do run_query(comparison_query) %}
        
        {# Return the name of the comparison table for reference #}
        {{ return({'comparison_table': comparison_schema ~ '.' ~ output_table}) }}
    {% endif %}
{% endmacro %}
