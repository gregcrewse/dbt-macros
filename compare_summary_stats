{# Helper macro to get downstream models #}
{% macro get_downstream_models(model_name) %}
    {% set downstream_models = [] %}
    {% if execute %}
        {% set model_node = graph.nodes['model.' ~ project_name ~ '.' ~ model_name] %}
        {% for node in graph.nodes.values() %}
            {% if node.resource_type == 'model' and node.depends_on and model_node.unique_id in node.depends_on.nodes %}
                {% do downstream_models.append(node.name) %}
            {% endif %}
        {% endfor %}
    {% endif %}
    {{ return(downstream_models) }}
{% endmacro %}

{# Helper macro to generate column stats #}
{% macro get_column_stats_sql(columns) %}
    COUNT(*) as row_count
    {% for column in columns %}
        ,COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
        {% if column.is_number() %}
            ,MIN({{ column.name }}) as min_{{ column.name }}
            ,MAX({{ column.name }}) as max_{{ column.name }}
            ,AVG({{ column.name }})::NUMERIC(38,2) as avg_{{ column.name }}
        {% endif %}
    {% endfor %}
{% endmacro %}

{# Main comparison macro #}
{% macro compare_schema_models(model_name) %}
    {% set dev_schema = 'NULL' %}
    {% set uat_schema = 'NULL' %}
    
    {% set model_relation = ref(model_name) %}
    {% set columns = adapter.get_columns_in_relation(model_relation) %}
    
    WITH dev_stats AS (
        SELECT 
            {{ get_column_stats_sql(columns) }}
        FROM {{ model_relation }}
    ),
    uat_stats AS (
        SELECT 
            {{ get_column_stats_sql(columns) }}
        FROM {{ uat_schema }}.{{ model_name }}
    ),
    metrics AS (
        SELECT 
            '{{ model_name }}' as model_name,
            GETDATE() as comparison_timestamp,
            'row_count' as metric_name,
            dev_stats.row_count::VARCHAR as dev_value,
            uat_stats.row_count::VARCHAR as uat_value,
            (dev_stats.row_count - uat_stats.row_count)::NUMERIC(38,2) as difference,
            CASE 
                WHEN uat_stats.row_count = 0 THEN NULL
                ELSE ((dev_stats.row_count::FLOAT - uat_stats.row_count) / uat_stats.row_count * 100)::NUMERIC(38,2)
            END as percent_change
        FROM dev_stats, uat_stats

        {% for column in columns %}
            UNION ALL
            SELECT 
                '{{ model_name }}' as model_name,
                GETDATE() as comparison_timestamp,
                'distinct_{{ column.name }}_count' as metric_name,
                dev_stats.distinct_{{ column.name }}_count::VARCHAR as dev_value,
                uat_stats.distinct_{{ column.name }}_count::VARCHAR as uat_value,
                (dev_stats.distinct_{{ column.name }}_count - uat_stats.distinct_{{ column.name }}_count)::NUMERIC(38,2) as difference,
                CASE 
                    WHEN uat_stats.distinct_{{ column.name }}_count = 0 THEN NULL
                    ELSE ((dev_stats.distinct_{{ column.name }}_count::FLOAT - uat_stats.distinct_{{ column.name }}_count) 
                          / uat_stats.distinct_{{ column.name }}_count * 100)::NUMERIC(38,2)
                END as percent_change
            FROM dev_stats, uat_stats

            {% if column.is_number() %}
                UNION ALL
                SELECT 
                    '{{ model_name }}' as model_name,
                    GETDATE() as comparison_timestamp,
                    'min_{{ column.name }}' as metric_name,
                    dev_stats.min_{{ column.name }}::VARCHAR as dev_value,
                    uat_stats.min_{{ column.name }}::VARCHAR as uat_value,
                    (dev_stats.min_{{ column.name }} - uat_stats.min_{{ column.name }})::NUMERIC(38,2) as difference,
                    CASE 
                        WHEN uat_stats.min_{{ column.name }} = 0 THEN NULL
                        ELSE ((dev_stats.min_{{ column.name }}::FLOAT - uat_stats.min_{{ column.name }}) 
                              / uat_stats.min_{{ column.name }} * 100)::NUMERIC(38,2)
                    END as percent_change
                FROM dev_stats, uat_stats

                UNION ALL
                SELECT 
                    '{{ model_name }}' as model_name,
                    GETDATE() as comparison_timestamp,
                    'max_{{ column.name }}' as metric_name,
                    dev_stats.max_{{ column.name }}::VARCHAR as dev_value,
                    uat_stats.max_{{ column.name }}::VARCHAR as uat_value,
                    (dev_stats.max_{{ column.name }} - uat_stats.max_{{ column.name }})::NUMERIC(38,2) as difference,
                    CASE 
                        WHEN uat_stats.max_{{ column.name }} = 0 THEN NULL
                        ELSE ((dev_stats.max_{{ column.name }}::FLOAT - uat_stats.max_{{ column.name }}) 
                              / uat_stats.max_{{ column.name }} * 100)::NUMERIC(38,2)
                    END as percent_change
                FROM dev_stats, uat_stats

                UNION ALL
                SELECT 
                    '{{ model_name }}' as model_name,
                    GETDATE() as comparison_timestamp,
                    'avg_{{ column.name }}' as metric_name,
                    dev_stats.avg_{{ column.name }}::VARCHAR as dev_value,
                    uat_stats.avg_{{ column.name }}::VARCHAR as uat_value,
                    (dev_stats.avg_{{ column.name }} - uat_stats.avg_{{ column.name }})::NUMERIC(38,2) as difference,
                    CASE 
                        WHEN uat_stats.avg_{{ column.name }} = 0 THEN NULL
                        ELSE ((dev_stats.avg_{{ column.name }}::FLOAT - uat_stats.avg_{{ column.name }}) 
                              / uat_stats.avg_{{ column.name }} * 100)::NUMERIC(38,2)
                    END as percent_change
                FROM dev_stats, uat_stats
            {% endif %}
        {% endfor %}
    )
    SELECT 
        model_name,
        comparison_timestamp,
        metric_name,
        dev_value,
        uat_value,
        difference,
        percent_change
    FROM metrics
    ORDER BY 
        comparison_timestamp,
        model_name,
        metric_name
{% endmacro %}
