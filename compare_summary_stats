{# Helper macro to get downstream models #}
{% macro get_downstream_models(model_name) %}
    {% set downstream_models = [] %}
    {% if execute %}
        {% set model_node = graph.nodes['model.' ~ project_name ~ '.' ~ model_name] %}
        {% for node in graph.nodes.values() %}
            {% if node.resource_type == 'model' and node.depends_on and model_node.unique_id in node.depends_on.nodes %}
                {% do downstream_models.append(node.name) %}
            {% endif %}
        {% endfor %}
    {% endif %}
    {{ return(downstream_models) }}
{% endmacro %}

{# Helper macro to collect statistics for a model #}
{% macro collect_model_stats(model_relation) %}
    {% set stats = {} %}
    
    {% if execute %}
        {% set columns = adapter.get_columns_in_relation(model_relation) %}
        
        {% set stats_query %}
            SELECT 
                COUNT(*) as row_count
                {% for column in columns %}
                    {% if column.is_number() or column.is_string() or column.is_datetime() %}
                        ,COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                        {% if column.is_number() %}
                            ,AVG({{ column.name }})::NUMERIC(38,2) as avg_{{ column.name }}
                            ,MIN({{ column.name }}) as min_{{ column.name }}
                            ,MAX({{ column.name }}) as max_{{ column.name }}
                        {% endif %}
                    {% endif %}
                {% endfor %}
            FROM {{ model_relation }}
        {% endset %}
        
        {% set results = run_query(stats_query) %}
        {% if results %}
            {% do stats.update(results.rows[0]) %}
        {% endif %}
    {% endif %}
    
    {{ return(stats) }}
{% endmacro %}

{# Main comparison macro #}
{% macro compare_model_execution_results(model_name, target_branch='main', output_path=none) %}
    {% if not output_path %}
        {% set timestamp = modules.datetime.datetime.now().strftime('%Y%m%d_%H%M%S') %}
        {% set output_path = '/tmp/execution_comparison_' ~ model_name ~ '_' ~ timestamp ~ '.csv' %}
    {% endif %}

    {% set results = {} %}
    
    {% if execute %}
        {# Get the current branch #}
        {% set current_branch = run_query('git rev-parse --abbrev-ref HEAD').columns[0][0] %}
        
        {# Get downstream models #}
        {% set downstream_models = get_downstream_models(model_name) %}
        
        {# Initialize results #}
        {% set results = {
            'target': {'branch': target_branch, 'stats': {}},
            'current': {'branch': current_branch, 'stats': {}}
        } %}
        
        {# Analyze target branch #}
        {% do run_query('git checkout ' ~ target_branch) %}
        {% do run_query('dbt run --models ' ~ model_name ~ ' ' ~ downstream_models | join(' ')) %}
        
        {# Collect target branch stats #}
        {% do results.target.stats.update({model_name: collect_model_stats(ref(model_name))}) %}
        {% for downstream in downstream_models %}
            {% do results.target.stats.update({downstream: collect_model_stats(ref(downstream))}) %}
        {% endfor %}
        
        {# Analyze current branch #}
        {% do run_query('git checkout ' ~ current_branch) %}
        {% do run_query('dbt run --models ' ~ model_name ~ ' ' ~ downstream_models | join(' ')) %}
        
        {# Collect current branch stats #}
        {% do results.current.stats.update({model_name: collect_model_stats(ref(model_name))}) %}
        {% for downstream in downstream_models %}
            {% do results.current.stats.update({downstream: collect_model_stats(ref(downstream))}) %}
        {% endfor %}
        
        {# Create CSV output #}
        {% set csv_rows = [] %}
        {% set csv_header = ['timestamp', 'model', 'metric', target_branch ~ '_value', 
                           current_branch ~ '_value', 'difference', 'percent_change'] %}
        
        {% for model, target_stats in results.target.stats.items() %}
            {% set current_stats = results.current.stats[model] %}
            {% for metric, target_value in target_stats.items() %}
                {% set current_value = current_stats[metric] %}
                {% set difference = none %}
                {% set percent_change = none %}
                
                {% if target_value is number and current_value is number %}
                    {% set difference = current_value - target_value %}
                    {% if target_value != 0 %}
                        {% set percent_change = ((current_value - target_value) / target_value * 100) | round(2) %}
                    {% endif %}
                {% endif %}
                
                {% do csv_rows.append([
                    modules.datetime.datetime.now(),
                    model,
                    metric,
                    target_value,
                    current_value,
                    difference,
                    percent_change
                ]) %}
            {% endfor %}
        {% endfor %}
        
        {# Write CSV file #}
        {% do modules.csv.writer(open(output_path, 'w')).writerows([csv_header] + csv_rows) %}
        
        {# Return to original branch #}
        {% do run_query('git checkout ' ~ current_branch) %}
    {% endif %}
    
    {{ return({'results': results, 'csv_path': output_path}) }}
{% endmacro %}
