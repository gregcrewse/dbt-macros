{# Helper macro to collect statistics for a model #}
{% macro collect_model_stats(model_ref) %}
    {% set stats = {} %}
    
    {# Get column information #}
    {% set columns = adapter.get_columns_in_relation(model_ref) %}
    
    {# Basic statistics query template #}
    {% set stats_query %}
        WITH base_stats AS (
            SELECT 
                COUNT(*) as row_count
                {% for column in columns %}
                    {% if column.is_string() or column.is_numeric() or column.is_timestamp() %}
                        ,COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                        {% if column.is_numeric() %}
                            ,MIN({{ column.name }}) as min_{{ column.name }}
                            ,MAX({{ column.name }}) as max_{{ column.name }}
                            ,AVG({{ column.name }})::NUMERIC(38,2) as avg_{{ column.name }}
                        {% endif %}
                    {% endif %}
                {% endfor %}
            FROM {{ model_ref }}
        )
        SELECT 
            *
            {% for column in columns %}
                {% if column.is_string() %}
                    ,(
                        SELECT STRING_AGG(DISTINCT {{ column.name }}::text, ',' ORDER BY {{ column.name }}::text)
                        FROM (
                            SELECT {{ column.name }}
                            FROM {{ model_ref }}
                            WHERE {{ column.name }} IS NOT NULL
                            GROUP BY {{ column.name }}
                            ORDER BY {{ column.name }}
                            LIMIT 10
                        ) t
                    ) as sample_values_{{ column.name }}
                {% endif %}
            {% endfor %}
        FROM base_stats
    {% endset %}
    
    {% set results = run_query(stats_query) %}
    {% do stats.update(results.rows[0]) %}
    
    {{ return(stats) }}
{% endmacro %}

{# Function to collect all model statistics for a branch #}
{% macro collect_branch_stats(branch_name, model_name, downstream_models) %}
    {% set branch_stats = {} %}
    
    {# Checkout branch #}
    {% do run_query('git checkout ' ~ branch_name) %}
    
    {# Run the model and its downstream dependencies #}
    {% do run_query('dbt run --models ' ~ model_name ~ ' +' ~ model_name) %}
    
    {# Collect stats for main model #}
    {% set model_ref = ref(model_name) %}
    {% do branch_stats.update({model_name: collect_model_stats(model_ref)}) %}
    
    {# Collect stats for downstream models #}
    {% for downstream in downstream_models %}
        {% set downstream_ref = ref(downstream.name.split('.')[-1]) %}
        {% do branch_stats.update({downstream.name: collect_model_stats(downstream_ref)}) %}
    {% endfor %}
    
    {{ return(branch_stats) }}
{% endmacro %}

{# Main comparison macro #}
{% macro compare_model_execution_results(model_name, target_branch='main', output_path=none) %}
    {# Store current branch name #}
    {% set current_branch = run_query('git rev-parse --abbrev-ref HEAD').columns[0][0] %}

    {# Set default output path if not provided #}
    {% if not output_path %}
        {% set timestamp = modules.datetime.datetime.now().strftime('%Y%m%d_%H%M%S') %}
        {% set output_path = '/tmp/execution_comparison_' ~ model_name ~ '_' ~ current_branch ~ '_vs_' ~ target_branch ~ '_' ~ timestamp ~ '.csv' %}
    {% endif %}

    {# Get downstream models #}
    {% set downstream_models = [] %}
    {% for node in graph.nodes.values() %}
        {% if node.resource_type == 'model' %}
            {% set upstream_nodes = node.depends_on.nodes %}
            {% if model_name in upstream_nodes %}
                {% do downstream_models.append(node) %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {# Initialize results storage #}
    {% set results = {
        'current_branch': {'name': current_branch, 'stats': {}},
        'target_branch': {'name': target_branch, 'stats': {}}
    } %}

    {# Collect statistics for both branches #}
    {% do results.target_branch.stats.update(collect_branch_stats(target_branch, model_name, downstream_models)) %}
    {% do results.current_branch.stats.update(collect_branch_stats(current_branch, model_name, downstream_models)) %}

    {# Return to original branch #}
    {% do run_query('git checkout ' ~ current_branch) %}

    {# Prepare CSV output #}
    {% set csv_rows = [] %}
    {% set csv_header = ['timestamp', 'metric_type', 'model_name', 'column_name', 'metric_name', 
                        target_branch ~ '_value', current_branch ~ '_value', 'difference', 'percent_change'] %}

    {# Add rows for each metric #}
    {% for branch_model, stats in results.target_branch.stats.items() %}
        {% set current_stats = results.current_branch.stats[branch_model] %}
        
        {% for metric, value in stats.items() %}
            {% set current_value = current_stats[metric] %}
            {% set metric_parts = metric.split('_') %}
            {% set metric_type = metric_parts[0] %}  {# first part of metric name #}
            {% set column_name = metric_parts[1:] | join('_') if metric_parts[1:] else 'N/A' %}
            
            {% set difference = none %}
            {% set percent_change = none %}
            
            {% if value is number and current_value is number %}
                {% set difference = current_value - value %}
                {% if value != 0 %}
                    {% set percent_change = ((current_value - value) / value * 100) | round(2) %}
                {% endif %}
            {% endif %}
            
            {% do csv_rows.append([
                modules.datetime.datetime.now(),
                metric_type,
                branch_model,
                column_name,
                metric,
                value,
                current_value,
                difference,
                percent_change
            ]) %}
        {% endfor %}
    {% endfor %}

    {# Write to CSV file #}
    {% do modules.csv.writer(open(output_path, 'w')).writerows([csv_header] + csv_rows) %}

    {# Return results dictionary #}
    {{ return({
        'results': results,
        'csv_output_path': output_path,
        'analyzed_models': [model_name] + downstream_models | map(attribute='name') | list
    }) }}
{% endmacro %}
