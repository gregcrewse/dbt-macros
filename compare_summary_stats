{# Helper macro to get downstream models #}
{% macro get_downstream_models(model_name) %}
    {% set downstream_models = [] %}
    {% if execute %}
        {% set model_node = graph.nodes['model.' ~ project_name ~ '.' ~ model_name] %}
        {% for node in graph.nodes.values() %}
            {% if node.resource_type == 'model' and node.depends_on and model_node.unique_id in node.depends_on.nodes %}
                {% do downstream_models.append(node.name) %}
            {% endif %}
        {% endfor %}
    {% endif %}
    {{ return(downstream_models) }}
{% endmacro %}

{# Helper macro to collect statistics for a model #}
{% macro collect_model_stats(schema_name, model_name) %}
    {% set stats = {} %}
    
    {% if execute %}
        {# Get relation from specific schema #}
        {% set relation = adapter.get_relation(
            database=target.database,
            schema=schema_name,
            identifier=model_name
        ) %}
        
        {% if relation %}
            {% set columns = adapter.get_columns_in_relation(relation) %}
            
            {% set stats_query %}
                SELECT 
                    COUNT(*) as row_count
                    {% for column in columns %}
                        {% if column.is_number() or column.is_string() or column.is_datetime() %}
                            ,COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                            {% if column.is_number() %}
                                ,AVG({{ column.name }})::NUMERIC(38,2) as avg_{{ column.name }}
                                ,MIN({{ column.name }}) as min_{{ column.name }}
                                ,MAX({{ column.name }}) as max_{{ column.name }}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                FROM {{ relation }}
            {% endset %}
            
            {% set results = run_query(stats_query) %}
            {% if results %}
                {% do stats.update(results.rows[0]) %}
            {% endif %}
        {% endif %}
    {% endif %}
    
    {{ return(stats) }}
{% endmacro %}

-- macros/model_comparison_macros.sql
{# Same helper macros as before #}
{% macro get_downstream_models(model_name) %}
    -- ... (keep this macro the same)
{% endmacro %}

{% macro collect_model_stats(schema_name, model_name) %}
    -- ... (keep this macro the same)
{% endmacro %}

{% macro compare_schema_models(model_name) %}
    {{ return(run_query(get_comparison_query(model_name))) }}
{% endmacro %}

{% macro get_comparison_query(model_name) %}
    {% set dev_schema = 'NULL' %}
    {% set uat_schema = 'NULL' %}
    
    WITH dev_stats AS (
        SELECT 
            COUNT(*) as row_count,
            {% for column in adapter.get_columns_in_relation(ref(model_name)) %}
                COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                {% if not loop.last %},{% endif %}
            {% endfor %}
        FROM {{ ref(model_name) }}
    ),
    uat_stats AS (
        SELECT 
            COUNT(*) as row_count,
            {% for column in adapter.get_columns_in_relation(ref(model_name)) %}
                COUNT(DISTINCT {{ column.name }}) as distinct_{{ column.name }}_count
                {% if not loop.last %},{% endif %}
            {% endfor %}
        FROM {{ uat_schema }}.{{ model_name }}
    )
    SELECT 
        '{{ model_name }}' as model_name,
        GETDATE() as comparison_timestamp,
        'row_count' as metric_name,
        dev_stats.row_count as dev_value,
        uat_stats.row_count as uat_value,
        dev_stats.row_count - uat_stats.row_count as difference,
        CASE 
            WHEN uat_stats.row_count = 0 THEN NULL
            ELSE ((dev_stats.row_count::FLOAT - uat_stats.row_count) / uat_stats.row_count * 100)
        END as percent_change
    FROM dev_stats, uat_stats
    {% for column in adapter.get_columns_in_relation(ref(model_name)) %}
    UNION ALL
    SELECT 
        '{{ model_name }}' as model_name,
        GETDATE() as comparison_timestamp,
        'distinct_{{ column.name }}_count' as metric_name,
        dev_stats.distinct_{{ column.name }}_count as dev_value,
        uat_stats.distinct_{{ column.name }}_count as uat_value,
        dev_stats.distinct_{{ column.name }}_count - uat_stats.distinct_{{ column.name }}_count as difference,
        CASE 
            WHEN uat_stats.distinct_{{ column.name }}_count = 0 THEN NULL
            ELSE ((dev_stats.distinct_{{ column.name }}_count::FLOAT - uat_stats.distinct_{{ column.name }}_count) 
                  / uat_stats.distinct_{{ column.name }}_count * 100)
        END as percent_change
    FROM dev_stats, uat_stats
    {% endfor %}
{% endmacro %}
